// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                       String                    @id @default(cuid())
  name                     String?
  email                    String?                   @unique
  emailVerified            DateTime?
  image                    String?
  role                     Role                      @default(USER)
  accounts                 Account[]
  sessions                 Session[]
  workout                  Workout[]
  followers                Follows[]                 @relation("follower")
  following                Follows[]                 @relation("following")
  workoutsCopied           String[]                  @default([])
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus StripeSubscriptionStatus?
  featureRequests          FeatureRequest[]
}

enum Role {
  USER
  ADMIN
}

enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

model StripeEvent {
  id               String   @id @unique
  api_version      String?
  data             Json
  request          Json?
  type             String
  object           String
  account          String?
  created          DateTime
  livemode         Boolean
  pending_webhooks Int
}

model Workout {
  id          String     @id @default(cuid())
  // If copied, this is the id of the original workout
  copyId      String?
  name        String
  description String?
  copyCount   Int        @default(0)
  notes       String?
  exercises   Exercise[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String?
}

model Exercise {
  id              String   @id @default(cuid())
  name            String
  instructions    String
  type            String
  muscle          String
  equipment       String
  equipmentNeeded Boolean  @default(false)
  difficulty      String
  time            Float?
  image           String?
  workout         Workout? @relation(fields: [workoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workoutId       String?
  set             Set[]
}

model Set {
  id         String   @id @default(cuid())
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exerciseId String
  reps       Int?
  weight     Float?
  time       Float?
  rest       Float?
}

model Follows {
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([followerId, followingId])
}

model FeatureRequest {
  id          String   @id @default(cuid())
  title       String
  description String
  votes       Int      @default(0)
  status      StatusFR @default(NOT_STARTED)
  approved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

enum StatusFR {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
